/* eslint-disable */
import * as types from './graphql';



/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
const documents = {
    "\n    fragment MailingAddress on MailingAddress {\n        id\n        formatted\n        firstName\n        lastName\n        zip\n        address1\n        city\n        country\n    }\n": types.MailingAddressFragmentDoc,
    "\n    fragment Blog on Blog {\n        title\n        handle\n        articles(first: 100) {\n            edges {\n                node {\n                    id\n                    handle\n                    title\n                    contentHtml\n                    publishedAt\n                    tags\n                    author {\n                        name\n                    }\n                    image {\n                        url\n                        altText\n                    }\n                }\n            }\n        }\n    }\n": types.BlogFragmentDoc,
    "\n    fragment Article on Article {\n        id\n        title\n        handle\n        contentHtml\n        publishedAt\n        tags\n        author {\n            name\n        }\n        image {\n            url\n            altText\n        }\n    }\n": types.ArticleFragmentDoc,
    "\n    fragment Cart on Cart {\n        id\n        checkoutUrl\n        cost {\n            subtotalAmount {\n                amount\n                currencyCode\n            }\n            totalAmount {\n                amount\n                currencyCode\n            }\n            totalTaxAmount {\n                amount\n                currencyCode\n            }\n        }\n        discountAllocations {\n            discountedAmount {\n                ...Money\n            }\n            targetType\n            ... on CartAutomaticDiscountAllocation {\n                title\n            }\n        }\n        discountCodes {\n            applicable\n            code\n        }\n        lines(first: 100) {\n            edges {\n                node {\n                    id\n                    quantity\n                    cost {\n                        totalAmount {\n                            amount\n                            currencyCode\n                        }\n                    }\n                    merchandise {\n                        ... on ProductVariant {\n                            id\n                            title\n                            selectedOptions {\n                                name\n                                value\n                            }\n                            product {\n                                ...Product\n                            }\n                        }\n                    }\n                    sellingPlanAllocation {\n                        sellingPlan {\n                            deliveryPolicy {\n                                ... on SellingPlanRecurringDeliveryPolicy {\n                                    __typename\n                                    interval\n                                    intervalCount\n                                }\n                            }\n                            description\n                            id\n                            name\n                        }\n                    }\n                    attributes {\n                        key\n                        value\n                    }\n                }\n            }\n        }\n        totalQuantity\n    }\n": types.CartFragmentDoc,
    "\n    fragment Collection on Collection {\n        handle\n        title\n        description\n        descriptionHtml\n        seo {\n            ...Seo\n        }\n        image {\n            ...Image\n        }\n        updatedAt\n        products(first: 100) {\n            edges {\n                node {\n                    ...Product\n                }\n            }\n        }\n    }\n": types.CollectionFragmentDoc,
    "\n    fragment Customer on Customer {\n        firstName\n        lastName\n        email\n        phone\n        acceptsMarketing\n    }\n": types.CustomerFragmentDoc,
    "\n    fragment Image on Image {\n        url\n        altText\n        width\n        height\n    }\n": types.ImageFragmentDoc,
    "\n    fragment Media on Media {\n        id\n        alt\n        previewImage {\n            ...Image\n        }\n        mediaContentType\n        presentation {\n            id\n            asJson(format: IMAGE)\n        }       \n    }\n": types.MediaFragmentDoc,
    "\n    fragment MenuItem on MenuItem {\n        title\n        url\n        items {\n            title\n            url\n            items {\n                title\n                url\n            }\n        }\n    }\n": types.MenuItemFragmentDoc,
    "\n    fragment Money on MoneyV2 {\n        amount\n        currencyCode\n    }\n": types.MoneyFragmentDoc,
    "\n    fragment Product on Product {\n        id\n        handle\n        availableForSale\n        title\n        description\n        descriptionHtml\n        priceRange {\n            maxVariantPrice {\n                amount\n                currencyCode\n            }\n            minVariantPrice {\n                amount\n                currencyCode\n            }\n        }\n        collections(first: 10) {\n            nodes {\n                handle\n                title\n                image {\n                    ...Image\n                }\n            }\n        }\n        selectedOrFirstAvailableVariant {\n            sku\n        }\n        shortDescription: metafield(\n            namespace: \"product\"\n            key: \"short_description\"\n        ) {\n            value\n        }\n        benefits: metafield(namespace: \"product\", key: \"benefits\") {\n            value\n        }\n        details: metafield(namespace: \"product\", key: \"details\") {\n            value\n        }\n\n        variants(first: 250) {\n            edges {\n                node {\n                    id\n                    title\n                    availableForSale\n                    selectedOptions {\n                        name\n                        value\n                    }\n                    price {\n                        amount\n                        currencyCode\n                    }\n                    variant_image_6: metafield(\n                        namespace: \"custom\"\n                        key: \"variant_image_6\"\n                    ) {\n                        reference {\n                            __typename\n                            ... on MediaImage {\n                                image {\n                                    url\n                                    altText\n                                    width\n                                    height\n                                }\n                            }\n                        }\n                    }\n                    variant_image: metafield(\n                        namespace: \"custom\"\n                        key: \"variant_image\"\n                    ) {\n                        reference {\n                            __typename\n                            ... on MediaImage {\n                                image {\n                                    url\n                                    altText\n                                    width\n                                    height\n                                }\n                            }\n                        }\n                    }\n                    pain_image: metafield(\n                        namespace: \"custom\"\n                        key: \"pain_image\"\n                    ) {\n                        reference {\n                            __typename\n                            ... on MediaImage {\n                                image {\n                                    url\n                                    altText\n                                    width\n                                    height\n                                }\n                            }\n                        }\n                    }\n                    ingredients_image: metafield(\n                        namespace: \"custom\"\n                        key: \"ingredients_image\"\n                    ) {\n                        reference {\n                            __typename\n                            ... on MediaImage {\n                                image {\n                                    url\n                                    altText\n                                    width\n                                    height\n                                }\n                            }\n                        }\n                    }\n                    comparison_image: metafield(\n                        namespace: \"custom\"\n                        key: \"comparison_image\"\n                    ) {\n                        reference {\n                            __typename\n                            ... on MediaImage {\n                                image {\n                                    url\n                                    altText\n                                    width\n                                    height\n                                }\n                            }\n                        }\n                    }\n                    faq_image: metafield(\n                        namespace: \"custom\"\n                        key: \"faq_image\"\n                    ) {\n                        reference {\n                            __typename\n                            ... on MediaImage {\n                                image {\n                                    url\n                                    altText\n                                    width\n                                    height\n                                }\n                            }\n                        }\n                    }\n                    product_type: metafield(\n                        namespace: \"custom\"\n                        key: \"product_type\"\n                    ) {\n                        value\n                    }\n                    light_bg_color: metafield(\n                        namespace: \"custom\"\n                        key: \"light_bg_color\"\n                    ) {\n                        value\n                    }\n                    ingredients: metafield(\n                        namespace: \"custom\"\n                        key: \"ingredients\"\n                    ) {\n                        value\n                    }\n                    details: metafield(namespace: \"custom\", key: \"details\") {\n                        value\n                    }\n                    nutrition_information: metafield(\n                        namespace: \"custom\"\n                        key: \"nutrition_information\"\n                    ) {\n                        value\n                    }\n                    unique_input_id: metafield(\n                        namespace: \"custom\"\n                        key: \"unique_input_id\"\n                    ) {\n                        value\n                    }\n                    variant_color: metafield(\n                        namespace: \"custom\"\n                        key: \"variant_color\"\n                    ) {\n                        value\n                    }\n                    subscription_info_meta: metafield(\n                        namespace: \"custom\"\n                        key: \"subscription_info_meta\"\n                    ) {\n                        value\n                    }\n                }\n            }\n        }\n        featuredImage {\n            ...Image\n        }\n        images(first: 20) {\n            edges {\n                node {\n                    ...Image\n                }\n            }\n        }\n        media(first: 20) {\n            edges {\n                node {\n                    ...Media\n                }\n            }\n        }\n        tags\n        updatedAt\n        seo {\n            ...Seo\n        }\n        sellingPlanGroups(first: 10) {\n            nodes {\n                sellingPlans(first: 10) {\n                    edges {\n                        node {\n                            id\n                            name\n                            description\n                            recurringDeliveries\n                            priceAdjustments {\n                                adjustmentValue {\n                                    ... on SellingPlanFixedPriceAdjustment {\n                                        __typename\n                                        price {\n                                            amount\n                                            currencyCode\n                                        }\n                                    }\n                                    ... on SellingPlanPercentagePriceAdjustment {\n                                        __typename\n                                        adjustmentPercentage\n                                    }\n                                    ... on SellingPlanFixedAmountPriceAdjustment {\n                                        __typename\n                                        adjustmentAmount {\n                                            amount\n                                            currencyCode\n                                        }\n                                    }\n                                }\n                            }\n                            deliveryPolicy {\n                                ... on SellingPlanRecurringDeliveryPolicy {\n                                    __typename\n                                    interval\n                                    intervalCount\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n": types.ProductFragmentDoc,
    "\n    fragment Seo on SEO {\n        description\n        title\n    }\n": types.SeoFragmentDoc,
    "\n    mutation addToCart($cartId: ID!, $lines: [CartLineInput!]!) {\n        cartLinesAdd(cartId: $cartId, lines: $lines) {\n            cart {\n                ...Cart\n            }\n        }\n    }\n": types.AddToCartDocument,
    "\n    mutation createCart($lineItems: [CartLineInput!]) {\n        cartCreate(input: { lines: $lineItems }) {\n            cart {\n                ...Cart\n            }\n            userErrors {\n                code\n                field\n                message\n            }\n        }\n    }\n": types.CreateCartDocument,
    "\n    mutation editCartItems($cartId: ID!, $lines: [CartLineUpdateInput!]!) {\n        cartLinesUpdate(cartId: $cartId, lines: $lines) {\n            cart {\n                ...Cart\n            }\n            userErrors {\n                code\n                field\n                message\n            }\n        }\n    }\n": types.EditCartItemsDocument,
    "\n    mutation cartLinesRemove($cartId: ID!, $lineIds: [ID!]!) {\n        cartLinesRemove(cartId: $cartId, lineIds: $lineIds) {\n            cart {\n                ...Cart\n            }\n            userErrors {\n                code\n                field\n                message\n            }\n        }\n    }\n": types.CartLinesRemoveDocument,
    "\n    mutation cartDiscountCodesUpdate($cartId: ID!, $discountCodes: [String!]!) {\n        cartDiscountCodesUpdate(\n            cartId: $cartId\n            discountCodes: $discountCodes\n        ) {\n            cart {\n                ...Cart\n            }\n            userErrors {\n                code\n                field\n                message\n            }\n            warnings {\n                code\n                message\n                target\n            }\n        }\n    }\n": types.CartDiscountCodesUpdateDocument,
    "\n    mutation customerAccessTokenCreate($email: String!, $password: String!) {\n        customerAccessTokenCreate(\n            input: { email: $email, password: $password }\n        ) {\n            customerAccessToken {\n                accessToken\n                expiresAt\n            }\n            customerUserErrors {\n                field\n                message\n                code\n            }\n        }\n    }\n": types.CustomerAccessTokenCreateDocument,
    "\n    mutation customerCreate($input: CustomerCreateInput!) {\n        customerCreate(input: $input) {\n            customer {\n                ...Customer\n            }\n            customerUserErrors {\n                field\n                message\n                code\n            }\n        }\n    }\n": types.CustomerCreateDocument,
    "\n    mutation customerAccessTokenRenew($customerAccessToken: String!) {\n        customerAccessTokenRenew(customerAccessToken: $customerAccessToken) {\n            customerAccessToken {\n                accessToken\n                expiresAt\n            }\n            userErrors {\n                field\n                message\n            }\n        }\n    }\n": types.CustomerAccessTokenRenewDocument,
    "\n    mutation customerAccessTokenDelete($customerAccessToken: String!) {\n        customerAccessTokenDelete(customerAccessToken: $customerAccessToken) {\n            deletedAccessToken\n            deletedCustomerAccessTokenId\n            userErrors {\n                field\n                message\n            }\n        }\n    }\n": types.CustomerAccessTokenDeleteDocument,
    "\n    mutation customerRecover($email: String!) {\n        customerRecover(email: $email) {\n            customerUserErrors {\n                code\n                field\n                message\n            }\n        }\n    }\n": types.CustomerRecoverDocument,
    "\n    mutation customerReset($id: ID!, $input: CustomerResetInput!) {\n        customerReset(id: $id, input: $input) {\n            customer {\n                ...Customer\n            }\n            customerAccessToken {\n                accessToken\n                expiresAt\n            }\n            customerUserErrors {\n                code\n                field\n                message\n            }\n        }\n    }\n": types.CustomerResetDocument,
    "\n    mutation customerResetByUrl($password: String!, $resetUrl: URL!) {\n        customerResetByUrl(password: $password, resetUrl: $resetUrl) {\n            customer {\n                firstName\n                lastName\n                email\n                phone\n                acceptsMarketing\n            }\n            customerAccessToken {\n                accessToken\n                expiresAt\n            }\n            customerUserErrors {\n                code\n                field\n                message\n            }\n        }\n    }\n": types.CustomerResetByUrlDocument,
    "\n    mutation customerUpdate(\n        $customer: CustomerUpdateInput!\n        $customerAccessToken: String!\n    ) {\n        customerUpdate(\n            customer: $customer\n            customerAccessToken: $customerAccessToken\n        ) {\n            customer {\n                ...Customer\n            }\n            customerAccessToken {\n                accessToken\n                expiresAt\n            }\n            customerUserErrors {\n                code\n                field\n                message\n            }\n        }\n    }\n": types.CustomerUpdateDocument,
    "\n    mutation customerAddressUpdate(\n        $address: MailingAddressInput!\n        $customerAccessToken: String!\n        $id: ID!\n    ) {\n        customerAddressUpdate(\n            address: $address\n            customerAccessToken: $customerAccessToken\n            id: $id\n        ) {\n            customerAddress {\n                ...MailingAddress\n            }\n            customerUserErrors {\n                code\n                field\n                message\n            }\n        }\n    }\n": types.CustomerAddressUpdateDocument,
    "\n    mutation customerAddressCreate(\n        $address: MailingAddressInput!\n        $customerAccessToken: String!\n    ) {\n        customerAddressCreate(\n            address: $address\n            customerAccessToken: $customerAccessToken\n        ) {\n            customerAddress {\n                ...MailingAddress\n            }\n            customerUserErrors {\n                code\n                field\n                message\n            }\n        }\n    }\n": types.CustomerAddressCreateDocument,
    "\n    mutation customerDefaultAddressUpdate(\n        $addressId: ID!\n        $customerAccessToken: String!\n    ) {\n        customerDefaultAddressUpdate(\n            addressId: $addressId\n            customerAccessToken: $customerAccessToken\n        ) {\n            customer {\n                defaultAddress {\n                    ...MailingAddress\n                }\n                addresses(first: 10) {\n                    edges {\n                        node {\n                            ...MailingAddress\n                        }\n                    }\n                }\n            }\n\n            customerUserErrors {\n                code\n                field\n                message\n            }\n        }\n    }\n": types.CustomerDefaultAddressUpdateDocument,
    "\n    mutation customerAddressDelete(\n        $customerAccessToken: String!\n        $addressId: ID!\n    ) {\n        customerAddressDelete(\n            customerAccessToken: $customerAccessToken\n            id: $addressId\n        ) {\n            customerUserErrors {\n                code\n                field\n                message\n            }\n            deletedCustomerAddressId\n        }\n    }\n": types.CustomerAddressDeleteDocument,
    "\n    query getBlogs($first: Int = 5) {\n        blogs(first: $first) {\n            edges {\n                node {\n                    ...Blog\n                }\n            }\n        }\n    }\n": types.GetBlogsDocument,
    "\n    query getArticleByBlogHandleAndArticleId($id: ID!) {\n        article(id: $id) {\n            ...Article\n        }\n    }\n": types.GetArticleByBlogHandleAndArticleIdDocument,
    "\n    query getCart($cartId: ID!) {\n        cart(id: $cartId) {\n            ...Cart\n        }\n    }\n": types.GetCartDocument,
    "\n    query getCollection($handle: String!) {\n        collection(handle: $handle) {\n            ...Collection\n        }\n    }\n": types.GetCollectionDocument,
    "\n    query getCollections {\n        collections(first: 100, sortKey: TITLE) {\n            edges {\n                node {\n                    ...Collection\n                }\n            }\n        }\n    }\n": types.GetCollectionsDocument,
    "\n    query getCollectionProducts(\n        $handle: String!\n        $sortKey: ProductCollectionSortKeys\n        $reverse: Boolean\n        $filters: [ProductFilter!]\n    ) {\n        collection(handle: $handle) {\n            products(\n                sortKey: $sortKey\n                reverse: $reverse\n                first: 100\n                filters: $filters\n            ) {\n                edges {\n                    node {\n                        ...Product\n                    }\n                }\n            }\n        }\n    }\n": types.GetCollectionProductsDocument,
    "\n    query getCustomer($customerAccessToken: String!) {\n        customer(customerAccessToken: $customerAccessToken) {\n            id\n            firstName\n            lastName\n            acceptsMarketing\n            email\n            phone\n        }\n    }\n": types.GetCustomerDocument,
    "\n    query getCustomerAddresses($customerAccessToken: String!) {\n        customer(customerAccessToken: $customerAccessToken) {\n            defaultAddress {\n                ...MailingAddress\n            }\n            addresses(first: 10) {\n                edges {\n                    node {\n                        ...MailingAddress\n                    }\n                }\n            }\n        }\n    }\n": types.GetCustomerAddressesDocument,
    "\n    query getMenu($handle: String!) {\n        menu(handle: $handle) {\n            items {\n                ...MenuItem\n            }\n        }\n    }\n": types.GetMenuDocument,
    "\n    query getMetaobject($handle: MetaobjectHandleInput!) {\n        metaobject(handle: $handle) {\n            handle\n            fields {\n                key\n                type\n                value\n            }\n        }\n    }\n": types.GetMetaobjectDocument,
    "\n    fragment page on Page {\n        ... on Page {\n            id\n            title\n            handle\n            body\n            bodySummary\n            seo {\n                ...Seo\n            }\n            createdAt\n            updatedAt\n        }\n    }\n": types.PageFragmentDoc,
    "\n    query getPage($handle: String!) {\n        pageByHandle(handle: $handle) {\n            ...page\n        }\n    }\n    \n": types.GetPageDocument,
    "\n    query getPages {\n        pages(first: 100) {\n            edges {\n                node {\n                    ...page\n                }\n            }\n        }\n    }\n    \n": types.GetPagesDocument,
    "\n    query getProduct($handle: String!) {\n        product(handle: $handle) {\n            ...Product\n        }\n    }\n": types.GetProductDocument,
    "\n    query getProducts(\n        $sortKey: ProductSortKeys\n        $reverse: Boolean\n        $query: String\n    ) {\n        products(\n            sortKey: $sortKey\n            reverse: $reverse\n            query: $query\n            first: 100\n        ) {\n            edges {\n                node {\n                    ...Product\n                }\n            }\n        }\n    }\n": types.GetProductsDocument,
    "\n    query getProductRecommendations($productId: ID!) {\n        productRecommendations(productId: $productId) {\n            ...Product\n        }\n    }\n": types.GetProductRecommendationsDocument,
    "\n    query getProductById($id: ID!) {\n        product(id: $id) {\n            ...Product\n        }\n    }\n": types.GetProductByIdDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment MailingAddress on MailingAddress {\n        id\n        formatted\n        firstName\n        lastName\n        zip\n        address1\n        city\n        country\n    }\n"): typeof import('./graphql').MailingAddressFragmentDoc;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment Blog on Blog {\n        title\n        handle\n        articles(first: 100) {\n            edges {\n                node {\n                    id\n                    handle\n                    title\n                    contentHtml\n                    publishedAt\n                    tags\n                    author {\n                        name\n                    }\n                    image {\n                        url\n                        altText\n                    }\n                }\n            }\n        }\n    }\n"): typeof import('./graphql').BlogFragmentDoc;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment Article on Article {\n        id\n        title\n        handle\n        contentHtml\n        publishedAt\n        tags\n        author {\n            name\n        }\n        image {\n            url\n            altText\n        }\n    }\n"): typeof import('./graphql').ArticleFragmentDoc;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment Cart on Cart {\n        id\n        checkoutUrl\n        cost {\n            subtotalAmount {\n                amount\n                currencyCode\n            }\n            totalAmount {\n                amount\n                currencyCode\n            }\n            totalTaxAmount {\n                amount\n                currencyCode\n            }\n        }\n        discountAllocations {\n            discountedAmount {\n                ...Money\n            }\n            targetType\n            ... on CartAutomaticDiscountAllocation {\n                title\n            }\n        }\n        discountCodes {\n            applicable\n            code\n        }\n        lines(first: 100) {\n            edges {\n                node {\n                    id\n                    quantity\n                    cost {\n                        totalAmount {\n                            amount\n                            currencyCode\n                        }\n                    }\n                    merchandise {\n                        ... on ProductVariant {\n                            id\n                            title\n                            selectedOptions {\n                                name\n                                value\n                            }\n                            product {\n                                ...Product\n                            }\n                        }\n                    }\n                    sellingPlanAllocation {\n                        sellingPlan {\n                            deliveryPolicy {\n                                ... on SellingPlanRecurringDeliveryPolicy {\n                                    __typename\n                                    interval\n                                    intervalCount\n                                }\n                            }\n                            description\n                            id\n                            name\n                        }\n                    }\n                    attributes {\n                        key\n                        value\n                    }\n                }\n            }\n        }\n        totalQuantity\n    }\n"): typeof import('./graphql').CartFragmentDoc;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment Collection on Collection {\n        handle\n        title\n        description\n        descriptionHtml\n        seo {\n            ...Seo\n        }\n        image {\n            ...Image\n        }\n        updatedAt\n        products(first: 100) {\n            edges {\n                node {\n                    ...Product\n                }\n            }\n        }\n    }\n"): typeof import('./graphql').CollectionFragmentDoc;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment Customer on Customer {\n        firstName\n        lastName\n        email\n        phone\n        acceptsMarketing\n    }\n"): typeof import('./graphql').CustomerFragmentDoc;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment Image on Image {\n        url\n        altText\n        width\n        height\n    }\n"): typeof import('./graphql').ImageFragmentDoc;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment Media on Media {\n        id\n        alt\n        previewImage {\n            ...Image\n        }\n        mediaContentType\n        presentation {\n            id\n            asJson(format: IMAGE)\n        }       \n    }\n"): typeof import('./graphql').MediaFragmentDoc;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment MenuItem on MenuItem {\n        title\n        url\n        items {\n            title\n            url\n            items {\n                title\n                url\n            }\n        }\n    }\n"): typeof import('./graphql').MenuItemFragmentDoc;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment Money on MoneyV2 {\n        amount\n        currencyCode\n    }\n"): typeof import('./graphql').MoneyFragmentDoc;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment Product on Product {\n        id\n        handle\n        availableForSale\n        title\n        description\n        descriptionHtml\n        priceRange {\n            maxVariantPrice {\n                amount\n                currencyCode\n            }\n            minVariantPrice {\n                amount\n                currencyCode\n            }\n        }\n        collections(first: 10) {\n            nodes {\n                handle\n                title\n                image {\n                    ...Image\n                }\n            }\n        }\n        selectedOrFirstAvailableVariant {\n            sku\n        }\n        shortDescription: metafield(\n            namespace: \"product\"\n            key: \"short_description\"\n        ) {\n            value\n        }\n        benefits: metafield(namespace: \"product\", key: \"benefits\") {\n            value\n        }\n        details: metafield(namespace: \"product\", key: \"details\") {\n            value\n        }\n\n        variants(first: 250) {\n            edges {\n                node {\n                    id\n                    title\n                    availableForSale\n                    selectedOptions {\n                        name\n                        value\n                    }\n                    price {\n                        amount\n                        currencyCode\n                    }\n                    variant_image_6: metafield(\n                        namespace: \"custom\"\n                        key: \"variant_image_6\"\n                    ) {\n                        reference {\n                            __typename\n                            ... on MediaImage {\n                                image {\n                                    url\n                                    altText\n                                    width\n                                    height\n                                }\n                            }\n                        }\n                    }\n                    variant_image: metafield(\n                        namespace: \"custom\"\n                        key: \"variant_image\"\n                    ) {\n                        reference {\n                            __typename\n                            ... on MediaImage {\n                                image {\n                                    url\n                                    altText\n                                    width\n                                    height\n                                }\n                            }\n                        }\n                    }\n                    pain_image: metafield(\n                        namespace: \"custom\"\n                        key: \"pain_image\"\n                    ) {\n                        reference {\n                            __typename\n                            ... on MediaImage {\n                                image {\n                                    url\n                                    altText\n                                    width\n                                    height\n                                }\n                            }\n                        }\n                    }\n                    ingredients_image: metafield(\n                        namespace: \"custom\"\n                        key: \"ingredients_image\"\n                    ) {\n                        reference {\n                            __typename\n                            ... on MediaImage {\n                                image {\n                                    url\n                                    altText\n                                    width\n                                    height\n                                }\n                            }\n                        }\n                    }\n                    comparison_image: metafield(\n                        namespace: \"custom\"\n                        key: \"comparison_image\"\n                    ) {\n                        reference {\n                            __typename\n                            ... on MediaImage {\n                                image {\n                                    url\n                                    altText\n                                    width\n                                    height\n                                }\n                            }\n                        }\n                    }\n                    faq_image: metafield(\n                        namespace: \"custom\"\n                        key: \"faq_image\"\n                    ) {\n                        reference {\n                            __typename\n                            ... on MediaImage {\n                                image {\n                                    url\n                                    altText\n                                    width\n                                    height\n                                }\n                            }\n                        }\n                    }\n                    product_type: metafield(\n                        namespace: \"custom\"\n                        key: \"product_type\"\n                    ) {\n                        value\n                    }\n                    light_bg_color: metafield(\n                        namespace: \"custom\"\n                        key: \"light_bg_color\"\n                    ) {\n                        value\n                    }\n                    ingredients: metafield(\n                        namespace: \"custom\"\n                        key: \"ingredients\"\n                    ) {\n                        value\n                    }\n                    details: metafield(namespace: \"custom\", key: \"details\") {\n                        value\n                    }\n                    nutrition_information: metafield(\n                        namespace: \"custom\"\n                        key: \"nutrition_information\"\n                    ) {\n                        value\n                    }\n                    unique_input_id: metafield(\n                        namespace: \"custom\"\n                        key: \"unique_input_id\"\n                    ) {\n                        value\n                    }\n                    variant_color: metafield(\n                        namespace: \"custom\"\n                        key: \"variant_color\"\n                    ) {\n                        value\n                    }\n                    subscription_info_meta: metafield(\n                        namespace: \"custom\"\n                        key: \"subscription_info_meta\"\n                    ) {\n                        value\n                    }\n                }\n            }\n        }\n        featuredImage {\n            ...Image\n        }\n        images(first: 20) {\n            edges {\n                node {\n                    ...Image\n                }\n            }\n        }\n        media(first: 20) {\n            edges {\n                node {\n                    ...Media\n                }\n            }\n        }\n        tags\n        updatedAt\n        seo {\n            ...Seo\n        }\n        sellingPlanGroups(first: 10) {\n            nodes {\n                sellingPlans(first: 10) {\n                    edges {\n                        node {\n                            id\n                            name\n                            description\n                            recurringDeliveries\n                            priceAdjustments {\n                                adjustmentValue {\n                                    ... on SellingPlanFixedPriceAdjustment {\n                                        __typename\n                                        price {\n                                            amount\n                                            currencyCode\n                                        }\n                                    }\n                                    ... on SellingPlanPercentagePriceAdjustment {\n                                        __typename\n                                        adjustmentPercentage\n                                    }\n                                    ... on SellingPlanFixedAmountPriceAdjustment {\n                                        __typename\n                                        adjustmentAmount {\n                                            amount\n                                            currencyCode\n                                        }\n                                    }\n                                }\n                            }\n                            deliveryPolicy {\n                                ... on SellingPlanRecurringDeliveryPolicy {\n                                    __typename\n                                    interval\n                                    intervalCount\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n"): typeof import('./graphql').ProductFragmentDoc;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment Seo on SEO {\n        description\n        title\n    }\n"): typeof import('./graphql').SeoFragmentDoc;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation addToCart($cartId: ID!, $lines: [CartLineInput!]!) {\n        cartLinesAdd(cartId: $cartId, lines: $lines) {\n            cart {\n                ...Cart\n            }\n        }\n    }\n"): typeof import('./graphql').AddToCartDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createCart($lineItems: [CartLineInput!]) {\n        cartCreate(input: { lines: $lineItems }) {\n            cart {\n                ...Cart\n            }\n            userErrors {\n                code\n                field\n                message\n            }\n        }\n    }\n"): typeof import('./graphql').CreateCartDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation editCartItems($cartId: ID!, $lines: [CartLineUpdateInput!]!) {\n        cartLinesUpdate(cartId: $cartId, lines: $lines) {\n            cart {\n                ...Cart\n            }\n            userErrors {\n                code\n                field\n                message\n            }\n        }\n    }\n"): typeof import('./graphql').EditCartItemsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation cartLinesRemove($cartId: ID!, $lineIds: [ID!]!) {\n        cartLinesRemove(cartId: $cartId, lineIds: $lineIds) {\n            cart {\n                ...Cart\n            }\n            userErrors {\n                code\n                field\n                message\n            }\n        }\n    }\n"): typeof import('./graphql').CartLinesRemoveDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation cartDiscountCodesUpdate($cartId: ID!, $discountCodes: [String!]!) {\n        cartDiscountCodesUpdate(\n            cartId: $cartId\n            discountCodes: $discountCodes\n        ) {\n            cart {\n                ...Cart\n            }\n            userErrors {\n                code\n                field\n                message\n            }\n            warnings {\n                code\n                message\n                target\n            }\n        }\n    }\n"): typeof import('./graphql').CartDiscountCodesUpdateDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation customerAccessTokenCreate($email: String!, $password: String!) {\n        customerAccessTokenCreate(\n            input: { email: $email, password: $password }\n        ) {\n            customerAccessToken {\n                accessToken\n                expiresAt\n            }\n            customerUserErrors {\n                field\n                message\n                code\n            }\n        }\n    }\n"): typeof import('./graphql').CustomerAccessTokenCreateDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation customerCreate($input: CustomerCreateInput!) {\n        customerCreate(input: $input) {\n            customer {\n                ...Customer\n            }\n            customerUserErrors {\n                field\n                message\n                code\n            }\n        }\n    }\n"): typeof import('./graphql').CustomerCreateDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation customerAccessTokenRenew($customerAccessToken: String!) {\n        customerAccessTokenRenew(customerAccessToken: $customerAccessToken) {\n            customerAccessToken {\n                accessToken\n                expiresAt\n            }\n            userErrors {\n                field\n                message\n            }\n        }\n    }\n"): typeof import('./graphql').CustomerAccessTokenRenewDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation customerAccessTokenDelete($customerAccessToken: String!) {\n        customerAccessTokenDelete(customerAccessToken: $customerAccessToken) {\n            deletedAccessToken\n            deletedCustomerAccessTokenId\n            userErrors {\n                field\n                message\n            }\n        }\n    }\n"): typeof import('./graphql').CustomerAccessTokenDeleteDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation customerRecover($email: String!) {\n        customerRecover(email: $email) {\n            customerUserErrors {\n                code\n                field\n                message\n            }\n        }\n    }\n"): typeof import('./graphql').CustomerRecoverDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation customerReset($id: ID!, $input: CustomerResetInput!) {\n        customerReset(id: $id, input: $input) {\n            customer {\n                ...Customer\n            }\n            customerAccessToken {\n                accessToken\n                expiresAt\n            }\n            customerUserErrors {\n                code\n                field\n                message\n            }\n        }\n    }\n"): typeof import('./graphql').CustomerResetDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation customerResetByUrl($password: String!, $resetUrl: URL!) {\n        customerResetByUrl(password: $password, resetUrl: $resetUrl) {\n            customer {\n                firstName\n                lastName\n                email\n                phone\n                acceptsMarketing\n            }\n            customerAccessToken {\n                accessToken\n                expiresAt\n            }\n            customerUserErrors {\n                code\n                field\n                message\n            }\n        }\n    }\n"): typeof import('./graphql').CustomerResetByUrlDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation customerUpdate(\n        $customer: CustomerUpdateInput!\n        $customerAccessToken: String!\n    ) {\n        customerUpdate(\n            customer: $customer\n            customerAccessToken: $customerAccessToken\n        ) {\n            customer {\n                ...Customer\n            }\n            customerAccessToken {\n                accessToken\n                expiresAt\n            }\n            customerUserErrors {\n                code\n                field\n                message\n            }\n        }\n    }\n"): typeof import('./graphql').CustomerUpdateDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation customerAddressUpdate(\n        $address: MailingAddressInput!\n        $customerAccessToken: String!\n        $id: ID!\n    ) {\n        customerAddressUpdate(\n            address: $address\n            customerAccessToken: $customerAccessToken\n            id: $id\n        ) {\n            customerAddress {\n                ...MailingAddress\n            }\n            customerUserErrors {\n                code\n                field\n                message\n            }\n        }\n    }\n"): typeof import('./graphql').CustomerAddressUpdateDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation customerAddressCreate(\n        $address: MailingAddressInput!\n        $customerAccessToken: String!\n    ) {\n        customerAddressCreate(\n            address: $address\n            customerAccessToken: $customerAccessToken\n        ) {\n            customerAddress {\n                ...MailingAddress\n            }\n            customerUserErrors {\n                code\n                field\n                message\n            }\n        }\n    }\n"): typeof import('./graphql').CustomerAddressCreateDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation customerDefaultAddressUpdate(\n        $addressId: ID!\n        $customerAccessToken: String!\n    ) {\n        customerDefaultAddressUpdate(\n            addressId: $addressId\n            customerAccessToken: $customerAccessToken\n        ) {\n            customer {\n                defaultAddress {\n                    ...MailingAddress\n                }\n                addresses(first: 10) {\n                    edges {\n                        node {\n                            ...MailingAddress\n                        }\n                    }\n                }\n            }\n\n            customerUserErrors {\n                code\n                field\n                message\n            }\n        }\n    }\n"): typeof import('./graphql').CustomerDefaultAddressUpdateDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation customerAddressDelete(\n        $customerAccessToken: String!\n        $addressId: ID!\n    ) {\n        customerAddressDelete(\n            customerAccessToken: $customerAccessToken\n            id: $addressId\n        ) {\n            customerUserErrors {\n                code\n                field\n                message\n            }\n            deletedCustomerAddressId\n        }\n    }\n"): typeof import('./graphql').CustomerAddressDeleteDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getBlogs($first: Int = 5) {\n        blogs(first: $first) {\n            edges {\n                node {\n                    ...Blog\n                }\n            }\n        }\n    }\n"): typeof import('./graphql').GetBlogsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getArticleByBlogHandleAndArticleId($id: ID!) {\n        article(id: $id) {\n            ...Article\n        }\n    }\n"): typeof import('./graphql').GetArticleByBlogHandleAndArticleIdDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getCart($cartId: ID!) {\n        cart(id: $cartId) {\n            ...Cart\n        }\n    }\n"): typeof import('./graphql').GetCartDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getCollection($handle: String!) {\n        collection(handle: $handle) {\n            ...Collection\n        }\n    }\n"): typeof import('./graphql').GetCollectionDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getCollections {\n        collections(first: 100, sortKey: TITLE) {\n            edges {\n                node {\n                    ...Collection\n                }\n            }\n        }\n    }\n"): typeof import('./graphql').GetCollectionsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getCollectionProducts(\n        $handle: String!\n        $sortKey: ProductCollectionSortKeys\n        $reverse: Boolean\n        $filters: [ProductFilter!]\n    ) {\n        collection(handle: $handle) {\n            products(\n                sortKey: $sortKey\n                reverse: $reverse\n                first: 100\n                filters: $filters\n            ) {\n                edges {\n                    node {\n                        ...Product\n                    }\n                }\n            }\n        }\n    }\n"): typeof import('./graphql').GetCollectionProductsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getCustomer($customerAccessToken: String!) {\n        customer(customerAccessToken: $customerAccessToken) {\n            id\n            firstName\n            lastName\n            acceptsMarketing\n            email\n            phone\n        }\n    }\n"): typeof import('./graphql').GetCustomerDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getCustomerAddresses($customerAccessToken: String!) {\n        customer(customerAccessToken: $customerAccessToken) {\n            defaultAddress {\n                ...MailingAddress\n            }\n            addresses(first: 10) {\n                edges {\n                    node {\n                        ...MailingAddress\n                    }\n                }\n            }\n        }\n    }\n"): typeof import('./graphql').GetCustomerAddressesDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getMenu($handle: String!) {\n        menu(handle: $handle) {\n            items {\n                ...MenuItem\n            }\n        }\n    }\n"): typeof import('./graphql').GetMenuDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getMetaobject($handle: MetaobjectHandleInput!) {\n        metaobject(handle: $handle) {\n            handle\n            fields {\n                key\n                type\n                value\n            }\n        }\n    }\n"): typeof import('./graphql').GetMetaobjectDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment page on Page {\n        ... on Page {\n            id\n            title\n            handle\n            body\n            bodySummary\n            seo {\n                ...Seo\n            }\n            createdAt\n            updatedAt\n        }\n    }\n"): typeof import('./graphql').PageFragmentDoc;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getPage($handle: String!) {\n        pageByHandle(handle: $handle) {\n            ...page\n        }\n    }\n    \n"): typeof import('./graphql').GetPageDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getPages {\n        pages(first: 100) {\n            edges {\n                node {\n                    ...page\n                }\n            }\n        }\n    }\n    \n"): typeof import('./graphql').GetPagesDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getProduct($handle: String!) {\n        product(handle: $handle) {\n            ...Product\n        }\n    }\n"): typeof import('./graphql').GetProductDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getProducts(\n        $sortKey: ProductSortKeys\n        $reverse: Boolean\n        $query: String\n    ) {\n        products(\n            sortKey: $sortKey\n            reverse: $reverse\n            query: $query\n            first: 100\n        ) {\n            edges {\n                node {\n                    ...Product\n                }\n            }\n        }\n    }\n"): typeof import('./graphql').GetProductsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getProductRecommendations($productId: ID!) {\n        productRecommendations(productId: $productId) {\n            ...Product\n        }\n    }\n"): typeof import('./graphql').GetProductRecommendationsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getProductById($id: ID!) {\n        product(id: $id) {\n            ...Product\n        }\n    }\n"): typeof import('./graphql').GetProductByIdDocument;


export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}
